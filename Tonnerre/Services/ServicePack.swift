//
//  ServiceResult.swift
//  Tonnerre
//
//  Created by Yaxin Cheng on 2018-06-03.
//  Copyright Â© 2018 Yaxin Cheng. All rights reserved.
//

import Cocoa

/**
 Service pack is a data structure represents a service provider or a service bounded with its provider
*/
enum ServicePack: DisplayProtocol {
  /**
   The provider type
  */
  case provider(BuiltInProvider)
  /**
   The service type, with its specific provider
  */
  case service(provider: BuiltInProvider, content: DisplayProtocol)
  
  var icon: NSImage {
    switch self {
    case .provider(let provider): return provider.icon
    case .service(provider: _, content: let value): return value.icon
    }
  }
  
  var name: String {
    switch self {
    case .provider(let provider): return provider.name
    case .service(provider: _, content: let value): return value.name
    }
  }
  
  var content: String {
    switch self {
    case .provider(let provider): return provider.content
    case .service(provider: _, content: let value): return value.content
    }
  }
  
  var placeholder: String {
    switch self {
    case .provider(let provider): return provider.placeholder
    case .service(provider: _, content: let value): return value.placeholder
    }
  }
  
  var priority: DisplayPriority {
    switch self {
    case .provider(let provider): return provider.priority
    case .service(provider: _, content: let value): return value.priority
    }
  }
  
  var alterContent: String? {
    switch self {
    case .provider(let provider): return provider.alterContent
    case .service(provider: let provider, content: let value): return value.alterContent ?? provider.alterContent
    }
  }
  
  var alterIcon: NSImage? {
    switch self {
    case .provider(let provider): return provider.alterIcon
    case .service(provider: let provider, content: let value): return value.alterIcon ?? provider.alterIcon
    }
  }
  
  /**
   Constructor of ServicePack
   - parameter provider: the service provider needs to be represented
  */
  init(provider: BuiltInProvider) {
    self = .provider(provider)
  }
  
  /**
   Constructor of ServicePack
   - parameter provider: the service provider needs to be represented
   - parameter service: the service generated by the provider
  */
  init(provider: BuiltInProvider, service: DisplayProtocol) {
    self = .service(provider: provider, content: service)
  }
}
